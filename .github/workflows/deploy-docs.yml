# .github/workflows/docs.yml
name: Docs & Storybook â†’ GitHub Pages

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-node@v5
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: package-lock.json
      - name: Cache TypeScript builds
        uses: actions/cache@v4
        with:
          path: |
            .tsbuildinfo
            node_modules/.cache
          key: ${{ runner.os }}-typescript-${{ hashFiles('**/tsconfig.json', '**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-typescript-
      - name: Pin npm 10 to avoid npm@11 CI bug
        run: npm i -g npm@10.9.0
      - name: Show Node/npm versions
        run: |
          node -v
          npm -v
      - name: Configure npm (stability)
        run: |
          npm config set audit false
          npm config set fund false
          npm config set progress false
          npm config set prefer-offline false
          npm config set engine-strict false
          npm config set fetch-retries 5
          npm config set fetch-retry-mintimeout 20000
          npm config set fetch-retry-maxtimeout 120000
      - name: Clean npm cache
        run: npm cache clean --force
      - name: Install dependencies (ci with fallback)
        shell: bash
        run: |
          set -e
          attempt() {
            echo "Attempt $1: npm ci"
            npm ci --no-audit --no-fund --ignore-scripts && return 0
            echo "Attempt $1 failed. Cleaning cache and retrying..."
            npm cache clean --force || true
            sleep 5
            return 1
          }
          if ! attempt 1; then
            if ! attempt 2; then
              if ! attempt 3; then
                echo "Falling back to npm install"
                npm install --no-audit --no-fund --ignore-scripts --legacy-peer-deps
              fi
            fi
          fi
      - name: Build
        run: npm run build

      # Gerar documentaÃ§Ã£o TypeDoc
      - name: Generate TypeDoc documentation
        run: npm run docs:generate # Gera ./docs a partir do TypeDoc

      # Gerar Storybook estÃ¡tico
      - name: Build Storybook
        run: npm run build-storybook # Gera ./storybook-static

      # Criar estrutura de navegaÃ§Ã£o integrada
      - name: Create integrated docs structure
        run: |
          mkdir -p integrated-docs
          cp -r docs/* integrated-docs/
          mkdir -p integrated-docs/storybook
          cp -r storybook-static/* integrated-docs/storybook/

          # Criar pÃ¡gina de navegaÃ§Ã£o principal com metadados dinÃ¢micos para SEO
          VERSION=$(node -p "require('./package.json').version")
          NAME=$(node -p "require('./package.json').name")
          DESC=$(node -p "require('./package.json').description")
          HOMEPAGE=$(node -p "require('./package.json').homepage")
          KEYWORDS=$(node -p "(require('./package.json').keywords||[]).join(', ')")

          cat > integrated-docs/index.html <<EOF
          <!DOCTYPE html>
          <html lang="pt-BR">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>${NAME} - DocumentaÃ§Ã£o e Playground</title>
            <meta name="description" content="${DESC}">
            <meta name="keywords" content="${KEYWORDS}">
            <meta name="author" content="Luciano Ã‰dipo">
            <meta name="robots" content="index, follow">
            <link rel="canonical" href="${HOMEPAGE}">

            <!-- Open Graph -->
            <meta property="og:title" content="${NAME} - DocumentaÃ§Ã£o">
            <meta property="og:description" content="${DESC}">
            <meta property="og:type" content="website">
            <meta property="og:url" content="${HOMEPAGE}">

            <!-- Twitter Card -->
            <meta name="twitter:card" content="summary">
            <meta name="twitter:title" content="${NAME} - DocumentaÃ§Ã£o">
            <meta name="twitter:description" content="${DESC}">

            <!-- JSON-LD (SoftwareApplication / SoftwareSourceCode) -->
            <script type="application/ld+json">
            {
              "@context": "https://schema.org",
              "@type": "SoftwareApplication",
              "name": "${NAME}",
              "description": "${DESC}",
              "url": "${HOMEPAGE}",
              "applicationCategory": "DeveloperTool",
              "softwareVersion": "${VERSION}",
              "author": {
                "@type": "Person",
                "name": "Luciano Ã‰dipo",
                "url": "https://github.com/lucianoedipo"
              }
            }
            </script>

            <style>
              body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 0; padding: 2rem; background: #f8f9fa; }
              .container { max-width: 920px; margin: 0 auto; background: white; padding: 2rem; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
              h1 { color: #1976d2; margin-bottom: 0.5rem; }
              .subtitle { color: #666; margin-bottom: 1rem; display:flex; align-items:center; gap:1rem }
              .nav-card { display: block; text-decoration: none; color: inherit; background: #fff; border: 2px solid #e0e0e0; border-radius: 8px; padding: 1.25rem; margin-bottom: 1rem; transition: all 0.3s; }
              .nav-card:hover { border-color: #1976d2; transform: translateY(-2px); box-shadow: 0 4px 12px rgba(0,0,0,0.15); }
              .nav-title { font-size: 1.15rem; font-weight: 600; color: #1976d2; margin-bottom: 0.25rem; }
              .nav-desc { color: #666; line-height: 1.4; }
              .version { background: #e3f2fd; color: #1976d2; padding: 0.25rem 0.75rem; border-radius: 4px; font-size: 0.875rem; display: inline-block; }
              .actions { display:flex; gap:1rem; align-items:center; margin-top:0.5rem }
              .badge { height:20px }
            </style>
          </head>
          <body>
            <div class="container">
              <h1>${NAME}</h1>
              <div class="subtitle">
                <div>Biblioteca React para gerenciamento de consentimento LGPD</div>
                <div class="version">v${VERSION}</div>
              </div>

              <div class="actions">
                <!-- NPM badge + link -->
                <a href="https://www.npmjs.com/package/${NAME}" aria-label="View on npm">
                  <img class="badge" src="https://img.shields.io/npm/v/${NAME}.svg" alt="npm version">
                </a>

                <!-- GitHub badge -->
                <a href="https://github.com/lucianoedipo/react-lgpd-consent" aria-label="View on GitHub">
                  <img class="badge" src="https://img.shields.io/github/v/release/lucianoedipo/react-lgpd-consent.svg" alt="github release">
                </a>
              </div>

              <a href="./storybook/index.html" class="nav-card">
                <div class="nav-title">ðŸ“š Storybook - Playground Interativo</div>
                <div class="nav-desc">Explore componentes, experimente diferentes configuraÃ§Ãµes e veja exemplos prÃ¡ticos em tempo real.</div>
              </a>

              <a href="./modules.html" class="nav-card">
                <div class="nav-title">ðŸ“– API Reference - TypeDoc</div>
                <div class="nav-desc">DocumentaÃ§Ã£o completa da API, interfaces TypeScript, tipos e referÃªncia tÃ©cnica detalhada.</div>
              </a>

              <a href="https://github.com/lucianoedipo/react-lgpd-consent" class="nav-card">
                <div class="nav-title">ðŸ”— RepositÃ³rio GitHub</div>
                <div class="nav-desc">CÃ³digo fonte, issues, releases e documentaÃ§Ã£o adicional no GitHub.</div>
              </a>

              <a href="https://www.npmjs.com/package/${NAME}" class="nav-card" aria-label="View on npm">
                <div class="nav-title">ðŸ“¦ Pacote no NPM</div>
                <div class="nav-desc">Veja o pacote publicado no NPM. VersÃ£o atual: <strong>v${VERSION}</strong>.</div>
              </a>

            </div>
          </body>
          </html>
          EOF

      - name: Configure Pages
        uses: actions/configure-pages@v5
        with:
          enablement: true

      - name: Post-process generated HTML (meta tags, JSON-LD, sitemap, robots)
        run: |
          # create CommonJS script (.cjs) so Node runs it as CJS even when package.json sets type: module
          cat > ./postprocess-integrated-docs.cjs << 'NODE'
          const fs = require('fs')
          const path = require('path')
          const pkg = require('./package.json')

          const base = (pkg.homepage || '').replace(/\/$/, '')
          const dir = path.resolve(process.cwd(), 'integrated-docs')

          function walk(d) {
            let out = []
            for (const e of fs.readdirSync(d, { withFileTypes: true })) {
              const full = path.join(d, e.name)
              if (e.isDirectory()) out = out.concat(walk(full))
              else if (e.isFile() && e.name.endsWith('.html')) out.push(full)
            }
            return out
          }

          function esc(s = '') {
            return String(s).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;')
          }

          const files = fs.existsSync(dir) ? walk(dir) : []

          files.forEach(file => {
            let html = fs.readFileSync(file, 'utf8')
            // avoid double-inject
            if (html.includes('<meta name="description"') || html.includes('application/ld+json')) return

            const rel = path.relative(dir, file).replace(/\\/g, '/')
            const url = base ? `${base}/${rel}` : rel

            const ld = {
              '@context': 'https://schema.org',
              '@type': 'SoftwareApplication',
              name: pkg.name || '',
              description: pkg.description || '',
              url: base || '',
              applicationCategory: 'DeveloperTool',
              softwareVersion: pkg.version || '',
              author: {
                '@type': 'Person',
                name: (pkg.author && pkg.author.name) || 'unknown'
              }
            }

            const inject = `\n    <meta name="description" content="${esc(pkg.description||'')}">\n    <meta name="keywords" content="${esc((pkg.keywords||[]).join(', '))}">\n    <link rel="canonical" href="${esc(url)}">\n    <meta property="og:title" content="${esc(pkg.name||'')}">\n    <meta property="og:description" content="${esc(pkg.description||'')}">\n    <meta property="og:url" content="${esc(url)}">\n    <meta name="twitter:card" content="summary">\n    <script type=\"application/ld+json\">${JSON.stringify(ld, null, 2)}</script>\n`;

            const out = html.replace(/<\/head>/i, inject + '\n  </head>')
            fs.writeFileSync(file, out, 'utf8')
            console.log('Processed', file)
          })

          // generate sitemap.xml
          const urls = files.map(f => (base ? `${base}/${path.relative(dir, f).replace(/\\/g, '/')}` : path.relative(dir, f).replace(/\\/g, '/')))
          const sitemap = `<?xml version="1.0" encoding="UTF-8"?>\n<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">\n${urls.map(u => '  <url>\n    <loc>' + esc(u) + '</loc>\n  </url>').join('\n')}\n</urlset>`
          fs.writeFileSync(path.join(dir, 'sitemap.xml'), sitemap, 'utf8')

          // generate robots.txt
          const robots = `User-agent: *\nAllow: /\nSitemap: ${base ? base + '/sitemap.xml' : '/sitemap.xml'}\n`
          fs.writeFileSync(path.join(dir, 'robots.txt'), robots, 'utf8')

          console.log('sitemap.xml and robots.txt generated')
          NODE

          node ./postprocess-integrated-docs.cjs
          rm ./postprocess-integrated-docs.cjs || true

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: integrated-docs

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
